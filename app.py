import streamlit as st # type: ignore
import pandas as pd
import plotly.express as px # type: ignore

# Definir as configura√ß√µes da p√°gina
# Definir o t√≠tulo e o √≠cone da p√°gina
set_page_config = st.set_page_config(
    page_title="Dashbord de sal√°rios na √Årea de Dados",
    page_icon="ü¶ù",
    layout="wide"
)

# Carregar os dados
df = pd.read_csv("https://raw.githubusercontent.com/vqrca/dashboard_salarios_dados/refs/heads/main/dados-imersao-final.csv")

# Barra lateral (Filtros)
st.sidebar.header("üîç Filtros")

# Filtro por ano
anos_disponiveis = sorted(df['ano'].unique())
anos_selecionados = st.sidebar.multiselect('Ano', anos_disponiveis, default=anos_disponiveis)

# Filtro por senioridade
senioridades_disponiveis = sorted(df['senioridade'].unique())
senioridades_selecionadas = st.sidebar.multiselect('N√≠vel de Senioridade', senioridades_disponiveis, default=senioridades_disponiveis)

# Filtro por Tipo de Contrato
contratos_disponiveis = sorted(df['contrato'].unique())
contratos_selecionados = st.sidebar.multiselect('Tipo de Contrato', contratos_disponiveis, default=contratos_disponiveis)

# Filtro por Tamanho da Empresa
tamanhos_disponiveis = sorted(df['tamanho_empresa'].unique())
tamanhos_selecionados = st.sidebar.multiselect('Tamanho da Empresa', tamanhos_disponiveis, default=tamanhos_disponiveis)

# Aplicar os filtros
# O dataframe √© filtrado com base nas sele√ß√µes feitas na barra lateral
df_filtrado = df[
    (df['ano'].isin(anos_selecionados)) &
    (df['senioridade'].isin(senioridades_selecionadas)) &
    (df['contrato'].isin(contratos_selecionados)) &
    (df['tamanho_empresa'].isin(tamanhos_selecionados))
]

# Conteudo principal
st.title('ü¶ù Dashboard de An√°lise de Sal√°rios na √Årea de Dados')
st.markdown('Este dashboard permite analisar os sal√°rios na √°rea de dados com base em diferentes filtros, como ano, n√≠vel de senioridade, tipo de contrato e tamanho da empresa.')

#Metricas principais
st.subheader('üìä M√©tricas Principais (Sal√°rio em USD)')

if not df_filtrado.empty:
    salario_medio = df_filtrado['usd'].mean()
    salario_maximo = df_filtrado['usd'].max()
    total_registros = df_filtrado.shape[0]
    carga_mais_frequente = df_filtrado['cargo'].mode()[0]
else:
    salario_medio, salario_maximo, total_registros, carga_mais_frequente = 0, 0 , 0, ''

col1, col2, col3, col4 = st.columns(4)
col1.metric('Sal√°rio M√©dio', f'${salario_medio:,.0f}')
col2.metric('Sal√°rio M√°ximo', f'${salario_maximo:,.0f}')
col3.metric('Total de Registros', f'{total_registros:,}')
col4.metric('Carga Mais Frequente', carga_mais_frequente)

st.markdown('---')

# An√°lise visual com o Plotly
st.subheader('üìà Gr√°ficos')

col_graf1, col_graf2 = st.columns(2)

with col_graf1:
    if not df_filtrado.empty:
        top_cargos = df_filtrado.groupby('cargo')['usd'].mean().nlargest(10).sort_values(ascending=True).reset_index()
        grafico_cargos = px.bar(
        top_cargos,
        x='usd',
        y='cargo',
        orientation='h',
        title='Top 10 Cargos por M√©dia Salarial',
        labels={'usd': 'M√©dia Salarial atual (USD)', 'cargo':''}    
        )
        grafico_cargos.update_layout(title_x=0.1, yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(grafico_cargos, use_container_width=True)
    else:
        st.warning('Nenhum dado dispon√≠vel para exibir o gr√°fico de cargos.')

with col_graf2:
    if not df_filtrado.empty:
        grafico_hist = px.histogram(
            df_filtrado,
            x='usd',
            nbins=30,
            title='Distribui√ß√£o de Sal√°rios Anuais',
            labels={'usd': 'Faixa Salarial (USD)', 'count': ''}   
        )
        grafico_hist.update_layout(title_x=0.1)
        st.plotly_chart(grafico_hist, use_container_width=True)
    else:
        st.warning('Nenhum dado dispon√≠vel para exibir o gr√°fico de distribui√ß√£o.')

col_graft3, col_graf4 = st.columns(2)

with col_graft3:
    if not df_filtrado.empty:
        remoto_contagem = df_filtrado['remoto'].value_counts().reset_index()
        remoto_contagem.columns = ['tipo_trabalho', 'quantidade']
        grafico_remoto = px.pie(
            remoto_contagem,
            names='tipo_trabalho',
            values='quantidade',
            title='Propor√ß√£o de tipos de Trabalho',
            hole= 0.5
        )
        grafico_remoto.update_traces(textinfo='percent+label')
        grafico_remoto.update_layout(title_x=0.1)
        st.plotly_chart(grafico_remoto, use_container_width=True)
    else:
        st.warning('Nenhum dado dispon√≠vel para exibir o gr√°fico de tipos de trabalho.')

with col_graf4:
    if not df_filtrado.empty:
        df_ds = df_filtrado[df_filtrado['cargo'] == 'Data Scientist']
        media_ds_pais = df_ds.groupby('residencia_iso3')['usd'].mean().reset_index()
        grafico_paises = px.choropleth(
            media_ds_pais,
            locations='residencia_iso3',
            color='usd',
            color_continuous_scale='rdylgn',
            title='M√©dia Salarial de Data Scientists por Pa√≠s',
            labels={'usd': 'M√©dia Salarial (USD)', 'residencia_iso3': 'Pa√≠s'})
        st.plotly_chart(grafico_paises, use_container_width=True)                             
    else:
        st.warning('Nenhum dado dispon√≠vel para exibir o mapa salarial.')

# Tabela de Dados Detalhados
st.subheader('üìã Tabela de Dados Detalhados')
st.dataframe(df_filtrado)